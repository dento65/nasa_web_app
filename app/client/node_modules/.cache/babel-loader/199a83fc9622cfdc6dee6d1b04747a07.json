{"ast":null,"code":"'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n/**\n * Return an object with all the information that should be in the JSON output.\n * It doesn't matter if we list keys that might not be in the err as the\n * JSON.stringify will remove properties who's values are set to `undefined`. So\n * we want to make sure that we include some common properties.\n *\n * @returns {Object}\n * @api public\n */\n\nfunction toJSON() {\n  var obj = {\n    message: this.message,\n    stack: this.stack\n  },\n      key;\n\n  for (key in this) {\n    if (has.call(this, key) && 'function' !== typeof this[key]) {\n      obj[key] = this[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * Generate a custom wrapped error object.\n *\n * @param {String|Error} err Error that needs to have additional properties.\n * @param {Object} props Addition properties for the Error.\n * @returns {Error} The generated or returned Error instance\n * @api public\n */\n\n\nmodule.exports = function failure(err, props) {\n  if (!err) err = 'Unspecified error';\n  if ('string' === typeof err) err = new Error(err);\n  if (props) for (var prop in props) {\n    if (!(prop in err) && has.call(props, prop)) {\n      err[prop] = props[prop];\n    }\n  } //\n  // Add a custom `toJSON` method so we can generate a useful output when\n  // running these objects through JSON.stringify.\n  //\n\n  if ('function' !== typeof err.toJSON) err.toJSON = toJSON;\n  return err;\n};","map":{"version":3,"sources":["/Users/hayat/Desktop/code/react/nasa/app/client/node_modules/failure/index.js"],"names":["has","Object","prototype","hasOwnProperty","toJSON","obj","message","stack","key","call","module","exports","failure","err","props","Error","prop"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,GAAkB;AAChB,MAAIC,GAAG,GAAI;AAAEC,IAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyBC,IAAAA,KAAK,EAAE,KAAKA;AAArC,GAAX;AAAA,MAAyDC,GAAzD;;AAEA,OAAKA,GAAL,IAAY,IAAZ,EAAkB;AAChB,QACKR,GAAG,CAACS,IAAJ,CAAS,IAAT,EAAeD,GAAf,KACA,eAAe,OAAO,KAAKA,GAAL,CAF3B,EAGE;AACAH,MAAAA,GAAG,CAACG,GAAD,CAAH,GAAW,KAAKA,GAAL,CAAX;AACD;AACF;;AAED,SAAOH,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAA6B;AAC5C,MAAI,CAACD,GAAL,EAAUA,GAAG,GAAG,mBAAN;AACV,MAAI,aAAa,OAAOA,GAAxB,EAA6BA,GAAG,GAAG,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AAE7B,MAAIC,KAAJ,EAAW,KAAK,IAAIE,IAAT,IAAiBF,KAAjB,EAAwB;AACjC,QAAI,EAAEE,IAAI,IAAIH,GAAV,KAAkBb,GAAG,CAACS,IAAJ,CAASK,KAAT,EAAgBE,IAAhB,CAAtB,EAA6C;AAC3CH,MAAAA,GAAG,CAACG,IAAD,CAAH,GAAYF,KAAK,CAACE,IAAD,CAAjB;AACD;AACF,GAR2C,CAU5C;AACA;AACA;AACA;;AACA,MAAI,eAAe,OAAOH,GAAG,CAACT,MAA9B,EAAsCS,GAAG,CAACT,MAAJ,GAAaA,MAAb;AACtC,SAAOS,GAAP;AACD,CAhBD","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Return an object with all the information that should be in the JSON output.\n * It doesn't matter if we list keys that might not be in the err as the\n * JSON.stringify will remove properties who's values are set to `undefined`. So\n * we want to make sure that we include some common properties.\n *\n * @returns {Object}\n * @api public\n */\nfunction toJSON() {\n  var obj =  { message: this.message, stack: this.stack }, key;\n\n  for (key in this) {\n    if (\n         has.call(this, key)\n      && 'function' !== typeof this[key]\n    ) {\n      obj[key] = this[key];\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Generate a custom wrapped error object.\n *\n * @param {String|Error} err Error that needs to have additional properties.\n * @param {Object} props Addition properties for the Error.\n * @returns {Error} The generated or returned Error instance\n * @api public\n */\nmodule.exports = function failure(err, props) {\n  if (!err) err = 'Unspecified error';\n  if ('string' === typeof err) err = new Error(err);\n\n  if (props) for (var prop in props) {\n    if (!(prop in err) && has.call(props, prop)) {\n      err[prop] = props[prop];\n    }\n  }\n\n  //\n  // Add a custom `toJSON` method so we can generate a useful output when\n  // running these objects through JSON.stringify.\n  //\n  if ('function' !== typeof err.toJSON) err.toJSON = toJSON;\n  return err;\n};\n"]},"metadata":{},"sourceType":"script"}