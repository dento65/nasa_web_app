{"ast":null,"code":"'use strict';\n\nvar response = require('xhr-response'),\n    statuscode = require('xhr-status'),\n    one = require('one-time'),\n    fail = require('failure');\n/**\n * Simple nope function that assigned to XHR requests as part of a clean-up\n * operation.\n *\n * @api private\n */\n\n\nfunction nope() {}\n/**\n * Attach various of event listeners to a given XHR request.\n *\n * @param {XHR} xhr A XHR request that requires listening.\n * @param {EventEmitter} ee EventEmitter that receives events.\n * @api public\n */\n\n\nfunction loads(xhr, ee) {\n  var onreadystatechange, onprogress, ontimeout, onabort, onerror, onload, timer;\n  /**\n   * Error listener.\n   *\n   * @param {Event} evt Triggered error event.\n   * @api private\n   */\n\n  onerror = xhr.onerror = one(function onerror(evt) {\n    var status = statuscode(xhr),\n        err = fail(new Error('Network request failed'), status);\n    ee.emit('error', err);\n    ee.emit('end', err, status);\n  });\n  /**\n   * Fix for FireFox's odd abort handling behaviour. When you press ESC on an\n   * active request it triggers `error` instead of abort. The same is called\n   * when an HTTP request is canceled onunload.\n   *\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n   * @see https://code.google.com/p/chromium/issues/detail?id=153570\n   * @param {Event} evt Triggerd abort event\n   * @api private\n   */\n\n  onabort = xhr.onabort = function onabort(evt) {\n    onerror(evt);\n  };\n  /**\n   * ReadyStateChange listener.\n   *\n   * @param {Event} evt Triggered readyState change event.\n   * @api private\n   */\n\n\n  onreadystatechange = xhr.onreadystatechange = function change(evt) {\n    var target = evt.target;\n    if (4 === target.readyState) return onload(evt);\n  };\n  /**\n   * The connection has timed out.\n   *\n   * @api private\n   */\n\n\n  ontimeout = xhr.ontimeout = one(function timeout(evt) {\n    ee.emit('timeout', evt); //\n    // Make sure that the request is aborted when there is a timeout. If this\n    // doesn't trigger an error, the next call will.\n    //\n\n    if (xhr.abort) xhr.abort();\n    onerror(evt);\n  }); //\n  // Fallback for implementations that did not ship with timer support yet.\n  // Microsoft's XDomainRequest was one of the first to ship with `.timeout`\n  // support so we all XHR implementations before that require a polyfill.\n  //\n  // @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816\n  //\n\n  if (xhr.timeout) timer = setTimeout(ontimeout, +xhr.timeout);\n  /**\n   * IE needs have it's `onprogress` function assigned to a unique function. So,\n   * no touchy touchy here!\n   *\n   * @param {Event} evt Triggered progress event.\n   * @api private\n   */\n\n  onprogress = xhr.onprogress = function progress(evt) {\n    var status = statuscode(xhr),\n        data;\n    ee.emit('progress', evt, status);\n\n    if (xhr.readyState >= 3 && status.code === 200 && (data = response(xhr))) {\n      ee.emit('stream', data, status);\n    }\n  };\n  /**\n   * Handle load events an potential data events for when there was no streaming\n   * data.\n   *\n   * @param {Event} evt Triggered load event.\n   * @api private\n   */\n\n\n  onload = xhr.onload = one(function load(evt) {\n    var status = statuscode(xhr),\n        data = response(xhr);\n    if (status.code < 100 || status.code > 599) return onerror(evt); //\n    // There is a bug in FireFox's XHR2 implementation where status code 204\n    // triggers a \"no element found\" error and bad data. So to be save here,\n    // we're just **never** going to emit a `stream` event as for 204's there\n    // shouldn't be any content.\n    //\n\n    if (data && status.code !== 204) {\n      ee.emit('stream', data, status);\n    }\n\n    ee.emit('end', undefined, status);\n  }); //\n  // Properly clean up the previously assigned event listeners and timers to\n  // prevent potential data leaks and unwanted `stream` events.\n  //\n\n  ee.once('end', function cleanup() {\n    xhr.onreadystatechange = onreadystatechange = xhr.onprogress = onprogress = xhr.ontimeout = ontimeout = xhr.onerror = onerror = xhr.onabort = onabort = xhr.onload = onload = nope;\n    if (timer) clearTimeout(timer);\n  });\n  return xhr;\n} //\n// Expose all the things.\n//\n\n\nmodule.exports = loads;","map":{"version":3,"sources":["/Users/hayat/Desktop/code/react/nasa/app/client/node_modules/loads/index.js"],"names":["response","require","statuscode","one","fail","nope","loads","xhr","ee","onreadystatechange","onprogress","ontimeout","onabort","onerror","onload","timer","evt","status","err","Error","emit","change","target","readyState","timeout","abort","setTimeout","progress","data","code","load","undefined","once","cleanup","clearTimeout","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar response = require('xhr-response')\n  , statuscode = require('xhr-status')\n  , one = require('one-time')\n  , fail = require('failure');\n\n/**\n * Simple nope function that assigned to XHR requests as part of a clean-up\n * operation.\n *\n * @api private\n */\nfunction nope() {}\n\n/**\n * Attach various of event listeners to a given XHR request.\n *\n * @param {XHR} xhr A XHR request that requires listening.\n * @param {EventEmitter} ee EventEmitter that receives events.\n * @api public\n */\nfunction loads(xhr, ee) {\n  var onreadystatechange\n    , onprogress\n    , ontimeout\n    , onabort\n    , onerror\n    , onload\n    , timer;\n\n  /**\n   * Error listener.\n   *\n   * @param {Event} evt Triggered error event.\n   * @api private\n   */\n  onerror = xhr.onerror = one(function onerror(evt) {\n    var status = statuscode(xhr)\n      , err = fail(new Error('Network request failed'), status);\n\n    ee.emit('error', err);\n    ee.emit('end', err, status);\n  });\n\n  /**\n   * Fix for FireFox's odd abort handling behaviour. When you press ESC on an\n   * active request it triggers `error` instead of abort. The same is called\n   * when an HTTP request is canceled onunload.\n   *\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n   * @see https://code.google.com/p/chromium/issues/detail?id=153570\n   * @param {Event} evt Triggerd abort event\n   * @api private\n   */\n  onabort = xhr.onabort = function onabort(evt) {\n    onerror(evt);\n  };\n\n  /**\n   * ReadyStateChange listener.\n   *\n   * @param {Event} evt Triggered readyState change event.\n   * @api private\n   */\n  onreadystatechange = xhr.onreadystatechange = function change(evt) {\n    var target = evt.target;\n\n    if (4 === target.readyState) return onload(evt);\n  };\n\n  /**\n   * The connection has timed out.\n   *\n   * @api private\n   */\n  ontimeout = xhr.ontimeout = one(function timeout(evt) {\n    ee.emit('timeout', evt);\n\n    //\n    // Make sure that the request is aborted when there is a timeout. If this\n    // doesn't trigger an error, the next call will.\n    //\n    if (xhr.abort) xhr.abort();\n    onerror(evt);\n  });\n\n  //\n  // Fallback for implementations that did not ship with timer support yet.\n  // Microsoft's XDomainRequest was one of the first to ship with `.timeout`\n  // support so we all XHR implementations before that require a polyfill.\n  //\n  // @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816\n  //\n  if (xhr.timeout) timer = setTimeout(ontimeout, +xhr.timeout);\n\n  /**\n   * IE needs have it's `onprogress` function assigned to a unique function. So,\n   * no touchy touchy here!\n   *\n   * @param {Event} evt Triggered progress event.\n   * @api private\n   */\n  onprogress = xhr.onprogress = function progress(evt) {\n    var status = statuscode(xhr)\n      , data;\n\n    ee.emit('progress', evt, status);\n\n    if (xhr.readyState >= 3 && status.code === 200 && (data = response(xhr))) {\n      ee.emit('stream', data, status);\n    }\n  };\n\n  /**\n   * Handle load events an potential data events for when there was no streaming\n   * data.\n   *\n   * @param {Event} evt Triggered load event.\n   * @api private\n   */\n  onload = xhr.onload = one(function load(evt) {\n    var status = statuscode(xhr)\n      , data = response(xhr);\n\n    if (status.code < 100 || status.code > 599) return onerror(evt);\n\n    //\n    // There is a bug in FireFox's XHR2 implementation where status code 204\n    // triggers a \"no element found\" error and bad data. So to be save here,\n    // we're just **never** going to emit a `stream` event as for 204's there\n    // shouldn't be any content.\n    //\n    if (data && status.code !== 204) {\n      ee.emit('stream', data, status);\n    }\n\n    ee.emit('end', undefined, status);\n  });\n\n  //\n  // Properly clean up the previously assigned event listeners and timers to\n  // prevent potential data leaks and unwanted `stream` events.\n  //\n  ee.once('end', function cleanup() {\n    xhr.onreadystatechange = onreadystatechange =\n    xhr.onprogress = onprogress =\n    xhr.ontimeout = ontimeout =\n    xhr.onerror = onerror =\n    xhr.onabort = onabort =\n    xhr.onload = onload = nope;\n\n    if (timer) clearTimeout(timer);\n  });\n\n  return xhr;\n}\n\n//\n// Expose all the things.\n//\nmodule.exports = loads;\n"]},"metadata":{},"sourceType":"script"}