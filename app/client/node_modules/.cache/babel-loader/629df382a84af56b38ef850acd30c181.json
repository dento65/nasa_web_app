{"ast":null,"code":"'use strict';\n\nvar Requested = require('./requested'),\n    listeners = require('loads'),\n    send = require('xhr-send'),\n    hang = require('hang'),\n    AXO = require('axo'),\n    XMLHttpRequest = require('node-http-xhr');\n/**\n * RequestS(tream).\n *\n * Options:\n *\n * - streaming: Should the request be streaming.\n * - method: Which HTTP method should be used.\n * - headers: Additional request headers.\n * - mode: Enable CORS mode.\n * - body: The payload for the request.\n *\n * @constructor\n * @param {String} url The URL we want to request.\n * @param {Object} options Various of request options.\n * @api public\n */\n\n\nvar Requests = module.exports = Requested.extend({\n  constructor: function bobthebuilder(url, options) {\n    if (!(this instanceof Requests)) return new Requests(url, options);\n    Requested.apply(this, arguments);\n  },\n\n  /**\n   * The offset of data that we've already previously read\n   *\n   * @type {Number}\n   * @private\n   */\n  offset: 0,\n\n  /**\n   * The requests instance has been fully initialized.\n   *\n   * @param {String} url The URL we need to connect to.\n   * @api private\n   */\n  initialize: function initialize(url) {\n    this.socket = Requests[Requests.method](this); //\n    // Open the socket BEFORE adding any properties to the instance as this might\n    // trigger a thrown `InvalidStateError: An attempt was made to use an object\n    // that is not, or is no longer, usable` error in FireFox:\n    //\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=707484\n    //\n\n    this.socket.open(this.method.toUpperCase(), url, true); //\n    // Register this as an active HTTP request.\n    //\n\n    Requests.active[this.id] = this;\n  },\n\n  /**\n   * Initialize and start requesting the supplied resource.\n   *\n   * @param {Object} options Passed in defaults.\n   * @api private\n   */\n  open: function open() {\n    var what,\n        slice = true,\n        requests = this,\n        socket = requests.socket;\n    requests.on('stream', function stream(data) {\n      if (!slice) {\n        return requests.emit('data', data);\n      } //\n      // Please note that we need to use a method here that works on both string\n      // as well as ArrayBuffer's as we have no certainty that we're receiving\n      // text.\n      //\n\n\n      var chunk = data.slice(requests.offset);\n      requests.offset = data.length;\n      requests.emit('data', chunk);\n    });\n    requests.on('end', function cleanup() {\n      delete Requests.active[requests.id];\n    });\n\n    if (this.timeout) {\n      socket.timeout = +this.timeout;\n    }\n\n    if ('cors' === this.mode.toLowerCase() && 'withCredentials' in socket) {\n      socket.withCredentials = true;\n    } //\n    // ActiveXObject will throw an `Type Mismatch` exception when setting the to\n    // an null-value and to be consistent with all XHR implementations we're going\n    // to cast the value to a string.\n    //\n    // While we don't technically support the XDomainRequest of IE, we do want to\n    // double check that the setRequestHeader is available before adding headers.\n    //\n    // Chrome has a bug where it will actually append values to the header instead\n    // of overriding it. So if you do a double setRequestHeader(Content-Type) with\n    // text/plain and with text/plain again, it will end up as `text/plain,\n    // text/plain` as header value. This is why use a headers object as it\n    // already eliminates duplicate headers.\n    //\n\n\n    for (what in this.headers) {\n      if (this.headers[what] !== undefined && this.socket.setRequestHeader) {\n        this.socket.setRequestHeader(what, this.headers[what] + '');\n      }\n    } //\n    // Set the correct responseType method.\n    //\n\n\n    if (requests.streaming) {\n      if (!this.body || 'string' === typeof this.body) {\n        if ('multipart' in socket) {\n          socket.multipart = true;\n          slice = false;\n        } else if (Requests.type.mozchunkedtext) {\n          socket.responseType = 'moz-chunked-text';\n          slice = false;\n        }\n      } else {\n        if (Requests.type.mozchunkedarraybuffer) {\n          socket.responseType = 'moz-chunked-arraybuffer';\n        } else if (Requests.type.msstream) {\n          socket.responseType = 'ms-stream';\n        }\n      }\n    }\n\n    listeners(socket, requests, requests.streaming);\n    requests.emit('before', socket);\n    send(socket, this.body, hang(function send(err) {\n      if (err) {\n        requests.emit('error', err);\n        requests.emit('end', err);\n      }\n\n      requests.emit('send');\n    }));\n  },\n\n  /**\n   * Completely destroy the running XHR and release of the internal references.\n   *\n   * @returns {Boolean} Successful destruction\n   * @api public\n   */\n  destroy: function destroy() {\n    if (!this.socket) return false;\n    this.emit('destroy');\n    this.socket.abort();\n    this.removeAllListeners();\n    this.headers = {};\n    this.socket = null;\n    this.body = null;\n    delete Requests.active[this.id];\n    return true;\n  }\n});\n/**\n * Create a new XMLHttpRequest.\n *\n * @returns {XMLHttpRequest}\n * @api private\n */\n\nRequests.XHR = function create() {\n  try {\n    return new XMLHttpRequest();\n  } catch (e) {}\n};\n/**\n * Create a new ActiveXObject which can be used for XHR.\n *\n * @returns {ActiveXObject}\n * @api private\n */\n\n\nRequests.AXO = function create() {\n  var ids = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'Microsoft.XMLHTTP'],\n      id;\n\n  while (ids.length) {\n    id = ids.shift();\n\n    try {\n      return new AXO(id);\n    } catch (e) {}\n  }\n};\n/**\n * Requests that are currently running.\n *\n * @type {Object}\n * @private\n */\n\n\nRequests.active = {};\n/**\n * The type of technology we are using to establish a working Ajax connection.\n * This can either be:\n *\n * - XHR: XMLHttpRequest\n * - AXO: ActiveXObject\n *\n * This is also used as internal optimization so we can easily get the correct\n * constructor as we've already feature detected it.\n *\n * @type {String}\n * @public\n */\n\nRequests.method = !!Requests.XHR() ? 'XHR' : !!Requests.AXO() ? 'AXO' : '';\n/**\n * Boolean indicating\n *\n * @type {Boolean}\n * @public\n */\n\nRequests.supported = !!Requests.method;\n/**\n * The different type of `responseType` parsers that are supported in this XHR\n * implementation.\n *\n * @type {Object}\n * @public\n */\n\nRequests.type = 'XHR' === Requests.method ? function detect() {\n  var types = 'arraybuffer,blob,document,json,text,moz-blob,moz-chunked-text,moz-chunked-arraybuffer,ms-stream'.split(','),\n      supported = {},\n      type,\n      xhr,\n      prop;\n\n  while (types.length) {\n    type = types.pop();\n    prop = type.replace(/-/g, '');\n    xhr = Requests.XHR(); //\n    // Older versions of Firefox/IE11 will throw an error because previous\n    // version of the specification do not support setting `responseType`\n    // before the request is opened. Thus, we open the request here.\n    //\n    // Note that `open()` does not actually open any connections; it just\n    // initializes the request object.\n    //\n\n    try {\n      // Try opening a request to current page.\n      xhr.open('get', '/', true);\n    } catch (e) {\n      // In JSDOM the above will fail because it only supports full URLs, so\n      // try opening a request to localhost.\n      try {\n        xhr.open('get', 'http://localhost/', true);\n      } catch (err) {\n        supported[prop] = false;\n        continue;\n      }\n    }\n\n    try {\n      xhr.responseType = type;\n      supported[prop] = 'response' in xhr && xhr.responseType === type;\n    } catch (e) {\n      supported[prop] = false;\n    }\n\n    xhr = null;\n  }\n\n  return supported;\n}() : {};\n/**\n * Do we support streaming response parsing.\n *\n * @type {Boolean}\n * @private\n */\n\nRequests.streaming = 'XHR' === Requests.method && ('multipart' in XMLHttpRequest.prototype || Requests.type.mozchunkedarraybuffer || Requests.type.mozchunkedtext || Requests.type.msstream || Requests.type.mozblob); //\n// IE has a bug which causes IE10 to freeze when close WebPage during an XHR\n// request: https://support.microsoft.com/kb/2856746\n//\n// The solution is to completely clean up all active running requests.\n//\n\nif (global.attachEvent) global.attachEvent('onunload', function reap() {\n  for (var id in Requests.active) {\n    Requests.active[id].destroy();\n  }\n}); //\n// Expose the Requests library.\n//\n\nmodule.exports = Requests;","map":{"version":3,"sources":["/Users/hayat/Desktop/code/react/nasa/app/client/node_modules/requests/index.js"],"names":["Requested","require","listeners","send","hang","AXO","XMLHttpRequest","Requests","module","exports","extend","constructor","bobthebuilder","url","options","apply","arguments","offset","initialize","socket","method","open","toUpperCase","active","id","what","slice","requests","on","stream","data","emit","chunk","length","cleanup","timeout","mode","toLowerCase","withCredentials","headers","undefined","setRequestHeader","streaming","body","multipart","type","mozchunkedtext","responseType","mozchunkedarraybuffer","msstream","err","destroy","abort","removeAllListeners","XHR","create","e","ids","shift","supported","detect","types","split","xhr","prop","pop","replace","prototype","mozblob","global","attachEvent","reap"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Requested = require('./requested')\n  , listeners = require('loads')\n  , send = require('xhr-send')\n  , hang = require('hang')\n  , AXO = require('axo')\n  , XMLHttpRequest = require('node-http-xhr');\n\n/**\n * RequestS(tream).\n *\n * Options:\n *\n * - streaming: Should the request be streaming.\n * - method: Which HTTP method should be used.\n * - headers: Additional request headers.\n * - mode: Enable CORS mode.\n * - body: The payload for the request.\n *\n * @constructor\n * @param {String} url The URL we want to request.\n * @param {Object} options Various of request options.\n * @api public\n */\nvar Requests = module.exports = Requested.extend({\n  constructor: function bobthebuilder(url, options) {\n    if (!(this instanceof Requests)) return new Requests(url, options);\n\n    Requested.apply(this, arguments);\n  },\n\n  /**\n   * The offset of data that we've already previously read\n   *\n   * @type {Number}\n   * @private\n   */\n  offset: 0,\n\n  /**\n   * The requests instance has been fully initialized.\n   *\n   * @param {String} url The URL we need to connect to.\n   * @api private\n   */\n  initialize: function initialize(url) {\n    this.socket = Requests[Requests.method](this);\n\n    //\n    // Open the socket BEFORE adding any properties to the instance as this might\n    // trigger a thrown `InvalidStateError: An attempt was made to use an object\n    // that is not, or is no longer, usable` error in FireFox:\n    //\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=707484\n    //\n    this.socket.open(this.method.toUpperCase(), url, true);\n\n    //\n    // Register this as an active HTTP request.\n    //\n    Requests.active[this.id] = this;\n  },\n\n  /**\n   * Initialize and start requesting the supplied resource.\n   *\n   * @param {Object} options Passed in defaults.\n   * @api private\n   */\n  open: function open() {\n    var what\n      , slice = true\n      , requests = this\n      , socket = requests.socket;\n\n    requests.on('stream', function stream(data) {\n      if (!slice) {\n        return requests.emit('data', data);\n      }\n\n      //\n      // Please note that we need to use a method here that works on both string\n      // as well as ArrayBuffer's as we have no certainty that we're receiving\n      // text.\n      //\n      var chunk = data.slice(requests.offset);\n      requests.offset = data.length;\n\n      requests.emit('data', chunk);\n    });\n\n    requests.on('end', function cleanup() {\n      delete Requests.active[requests.id];\n    });\n\n    if (this.timeout) {\n      socket.timeout = +this.timeout;\n    }\n\n    if ('cors' === this.mode.toLowerCase() && 'withCredentials' in socket) {\n      socket.withCredentials = true;\n    }\n\n    //\n    // ActiveXObject will throw an `Type Mismatch` exception when setting the to\n    // an null-value and to be consistent with all XHR implementations we're going\n    // to cast the value to a string.\n    //\n    // While we don't technically support the XDomainRequest of IE, we do want to\n    // double check that the setRequestHeader is available before adding headers.\n    //\n    // Chrome has a bug where it will actually append values to the header instead\n    // of overriding it. So if you do a double setRequestHeader(Content-Type) with\n    // text/plain and with text/plain again, it will end up as `text/plain,\n    // text/plain` as header value. This is why use a headers object as it\n    // already eliminates duplicate headers.\n    //\n    for (what in this.headers) {\n      if (this.headers[what] !== undefined && this.socket.setRequestHeader) {\n        this.socket.setRequestHeader(what, this.headers[what] +'');\n      }\n    }\n\n    //\n    // Set the correct responseType method.\n    //\n    if (requests.streaming) {\n      if (!this.body || 'string' === typeof this.body) {\n        if ('multipart' in socket) {\n          socket.multipart = true;\n          slice = false;\n        } else if (Requests.type.mozchunkedtext) {\n          socket.responseType = 'moz-chunked-text';\n          slice = false;\n        }\n      } else {\n        if (Requests.type.mozchunkedarraybuffer) {\n          socket.responseType = 'moz-chunked-arraybuffer';\n        } else if (Requests.type.msstream) {\n          socket.responseType = 'ms-stream';\n        }\n      }\n    }\n\n    listeners(socket, requests, requests.streaming);\n    requests.emit('before', socket);\n\n    send(socket, this.body, hang(function send(err) {\n      if (err) {\n        requests.emit('error', err);\n        requests.emit('end', err);\n      }\n\n      requests.emit('send');\n    }));\n  },\n\n  /**\n   * Completely destroy the running XHR and release of the internal references.\n   *\n   * @returns {Boolean} Successful destruction\n   * @api public\n   */\n  destroy: function destroy() {\n    if (!this.socket) return false;\n\n    this.emit('destroy');\n\n    this.socket.abort();\n    this.removeAllListeners();\n\n    this.headers = {};\n    this.socket = null;\n    this.body = null;\n\n    delete Requests.active[this.id];\n\n    return true;\n  }\n});\n\n/**\n * Create a new XMLHttpRequest.\n *\n * @returns {XMLHttpRequest}\n * @api private\n */\nRequests.XHR = function create() {\n  try { return new XMLHttpRequest(); }\n  catch (e) {}\n};\n\n/**\n * Create a new ActiveXObject which can be used for XHR.\n *\n * @returns {ActiveXObject}\n * @api private\n */\nRequests.AXO = function create() {\n  var ids = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'Microsoft.XMLHTTP']\n    , id;\n\n  while (ids.length) {\n    id = ids.shift();\n\n    try { return new AXO(id); }\n    catch (e) {}\n  }\n};\n\n/**\n * Requests that are currently running.\n *\n * @type {Object}\n * @private\n */\nRequests.active = {};\n\n/**\n * The type of technology we are using to establish a working Ajax connection.\n * This can either be:\n *\n * - XHR: XMLHttpRequest\n * - AXO: ActiveXObject\n *\n * This is also used as internal optimization so we can easily get the correct\n * constructor as we've already feature detected it.\n *\n * @type {String}\n * @public\n */\nRequests.method = !!Requests.XHR() ? 'XHR' : (!!Requests.AXO() ? 'AXO' : '');\n\n/**\n * Boolean indicating\n *\n * @type {Boolean}\n * @public\n */\nRequests.supported = !!Requests.method;\n\n/**\n * The different type of `responseType` parsers that are supported in this XHR\n * implementation.\n *\n * @type {Object}\n * @public\n */\nRequests.type = 'XHR' === Requests.method ? (function detect() {\n  var types = 'arraybuffer,blob,document,json,text,moz-blob,moz-chunked-text,moz-chunked-arraybuffer,ms-stream'.split(',')\n    , supported = {}\n    , type, xhr, prop;\n\n  while (types.length) {\n    type = types.pop();\n    prop = type.replace(/-/g, '');\n    xhr = Requests.XHR();\n\n    //\n    // Older versions of Firefox/IE11 will throw an error because previous\n    // version of the specification do not support setting `responseType`\n    // before the request is opened. Thus, we open the request here.\n    //\n    // Note that `open()` does not actually open any connections; it just\n    // initializes the request object.\n    //\n    try {\n      // Try opening a request to current page.\n      xhr.open('get', '/', true);\n    } catch (e) {\n      // In JSDOM the above will fail because it only supports full URLs, so\n      // try opening a request to localhost.\n      try {\n        xhr.open('get', 'http://localhost/', true);\n      } catch (err) {\n        supported[prop] = false;\n        continue;\n      }\n    }\n\n    try {\n      xhr.responseType = type;\n      supported[prop] = 'response' in xhr && xhr.responseType === type;\n    } catch (e) {\n      supported[prop] = false;\n    }\n\n    xhr = null;\n  }\n\n  return supported;\n}()) : {};\n\n/**\n * Do we support streaming response parsing.\n *\n * @type {Boolean}\n * @private\n */\nRequests.streaming = 'XHR' === Requests.method && (\n     'multipart' in XMLHttpRequest.prototype\n  || Requests.type.mozchunkedarraybuffer\n  || Requests.type.mozchunkedtext\n  || Requests.type.msstream\n  || Requests.type.mozblob\n);\n\n//\n// IE has a bug which causes IE10 to freeze when close WebPage during an XHR\n// request: https://support.microsoft.com/kb/2856746\n//\n// The solution is to completely clean up all active running requests.\n//\nif (global.attachEvent) global.attachEvent('onunload', function reap() {\n  for (var id in Requests.active) {\n    Requests.active[id].destroy();\n  }\n});\n\n//\n// Expose the Requests library.\n//\nmodule.exports = Requests;\n"]},"metadata":{},"sourceType":"script"}