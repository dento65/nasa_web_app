{"ast":null,"code":"'use strict';\n/**\n * Delay function calls only if they are not already ran async.\n *\n * @param {Function} fn Function that should be forced in async execution\n * @returns {Function} A wrapped function that will called the supplied callback.\n * @api public\n */\n\nmodule.exports = function hang(fn) {\n  var start = +new Date();\n  /**\n   * The wrapped function.\n   *\n   * @api private\n   */\n\n  function bro() {\n    var self = this; //\n    // Time has passed since we've generated this function so we're going to\n    // assume that this function is already executed async.\n    //\n\n    if (+new Date() > start) {\n      return fn.apply(self, arguments);\n    }\n\n    for (var i = 0, l = arguments.length, args = new Array(l); i < l; i++) {\n      args[i] = arguments[i];\n    }\n\n    (global.setImmediate || global.setTimeout)(function delay() {\n      fn.apply(self, args);\n      self = args = null;\n    }, 0);\n  } //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n\n\n  bro.displayName = fn.displayName || fn.name || bro.displayName || bro.name;\n  return bro;\n};","map":{"version":3,"sources":["/Users/hayat/Desktop/code/react/nasa/app/client/node_modules/hang/index.js"],"names":["module","exports","hang","fn","start","Date","bro","self","apply","arguments","i","l","length","args","Array","global","setImmediate","setTimeout","delay","displayName","name"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACjC,MAAIC,KAAK,GAAG,CAAE,IAAIC,IAAJ,EAAd;AAEA;AACF;AACA;AACA;AACA;;AACE,WAASC,GAAT,GAAe;AACb,QAAIC,IAAI,GAAG,IAAX,CADa,CAGb;AACA;AACA;AACA;;AACA,QAAI,CAAE,IAAIF,IAAJ,EAAF,GAAgBD,KAApB,EAA2B;AACzB,aAAOD,EAAE,CAACK,KAAH,CAASD,IAAT,EAAeE,SAAf,CAAP;AACD;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,SAAS,CAACG,MAAzB,EAAiCC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,CAAV,CAA7C,EAA2DD,CAAC,GAAGC,CAA/D,EAAkED,CAAC,EAAnE,EAAuE;AACrEG,MAAAA,IAAI,CAACH,CAAD,CAAJ,GAAUD,SAAS,CAACC,CAAD,CAAnB;AACD;;AAED,KAACK,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,UAA/B,EAA2C,SAASC,KAAT,GAAiB;AAC1Df,MAAAA,EAAE,CAACK,KAAH,CAASD,IAAT,EAAeM,IAAf;AACAN,MAAAA,IAAI,GAAGM,IAAI,GAAG,IAAd;AACD,KAHD,EAGG,CAHH;AAID,GA3BgC,CA6BjC;AACA;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,GAAG,CAACa,WAAJ,GAAkBhB,EAAE,CAACgB,WAAH,IAAkBhB,EAAE,CAACiB,IAArB,IAA6Bd,GAAG,CAACa,WAAjC,IAAgDb,GAAG,CAACc,IAAtE;AAEA,SAAOd,GAAP;AACD,CAtCD","sourcesContent":["'use strict';\n\n/**\n * Delay function calls only if they are not already ran async.\n *\n * @param {Function} fn Function that should be forced in async execution\n * @returns {Function} A wrapped function that will called the supplied callback.\n * @api public\n */\nmodule.exports = function hang(fn) {\n  var start = +(new Date());\n\n  /**\n   * The wrapped function.\n   *\n   * @api private\n   */\n  function bro() {\n    var self = this;\n\n    //\n    // Time has passed since we've generated this function so we're going to\n    // assume that this function is already executed async.\n    //\n    if (+(new Date()) > start) {\n      return fn.apply(self, arguments);\n    }\n\n    for (var i = 0, l = arguments.length, args = new Array(l); i < l; i++) {\n      args[i] = arguments[i];\n    }\n\n    (global.setImmediate || global.setTimeout)(function delay() {\n      fn.apply(self, args);\n      self = args = null;\n    }, 0);\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  bro.displayName = fn.displayName || fn.name || bro.displayName || bro.name;\n\n  return bro;\n};\n"]},"metadata":{},"sourceType":"script"}