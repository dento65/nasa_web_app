{"ast":null,"code":"// 'use strict'; //<-- Root of all evil, causes thrown errors on readyOnly props.\nvar has = Object.prototype.hasOwnProperty,\n    slice = Array.prototype.slice;\n/**\n * Copy all readable properties from an Object or function and past them on the\n * object.\n *\n * @param {Object} obj The object we should paste everything on.\n * @returns {Object} obj\n * @api private\n */\n\nfunction copypaste(obj) {\n  var args = slice.call(arguments, 1),\n      i = 0,\n      prop;\n\n  for (; i < args.length; i++) {\n    if (!args[i]) continue;\n\n    for (prop in args[i]) {\n      if (!has.call(args[i], prop)) continue;\n      obj[prop] = args[i][prop];\n    }\n  }\n\n  return obj;\n}\n/**\n * A proper mixin function that respects getters and setters.\n *\n * @param {Object} obj The object that should receive all properties.\n * @returns {Object} obj\n * @api private\n */\n\n\nfunction mixin(obj) {\n  if ('function' !== typeof Object.getOwnPropertyNames || 'function' !== typeof Object.defineProperty || 'function' !== typeof Object.getOwnPropertyDescriptor) {\n    return copypaste.apply(null, arguments);\n  } //\n  // We can safely assume that if the methods we specify above are supported\n  // that it's also save to use Array.forEach for iteration purposes.\n  //\n\n\n  slice.call(arguments, 1).forEach(function forEach(o) {\n    Object.getOwnPropertyNames(o).forEach(function eachAttr(attr) {\n      Object.defineProperty(obj, attr, Object.getOwnPropertyDescriptor(o, attr));\n    });\n  });\n  return obj;\n}\n/**\n * Detect if a given parent is constructed in strict mode so we can force the\n * child in to the same mode. It detects the strict mode by accessing properties\n * on the function that are forbidden in strict mode:\n *\n * - `caller`\n * - `callee`\n * - `arguments`\n *\n * Forcing the a thrown TypeError.\n *\n * @param {Function} parent Parent constructor\n * @returns {Function} The child constructor\n * @api private\n */\n\n\nfunction mode(parent) {\n  try {\n    var e = parent.caller || parent.arguments || parent.callee;\n    return function child() {\n      return parent.apply(this, arguments);\n    };\n  } catch (e) {}\n\n  return function child() {\n    'use strict';\n\n    return parent.apply(this, arguments);\n  };\n} //\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\n//\n\n\nmodule.exports = function extend(protoProps, staticProps) {\n  var parent = this,\n      child; //\n  // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent's constructor.\n  //\n\n  if (protoProps && has.call(protoProps, 'constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = mode(parent);\n  } //\n  // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function.\n  //\n\n\n  function Surrogate() {\n    this.constructor = child;\n  }\n\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate(); //\n  // Add prototype properties (instance properties) to the subclass,\n  // if supplied.\n  //\n\n  if (protoProps) mixin(child.prototype, protoProps); //\n  // Add static properties to the constructor function, if supplied.\n  //\n\n  copypaste(child, parent, staticProps); //\n  // Set a convenience property in case the parent's prototype is needed later.\n  //\n\n  child.__super__ = parent.prototype;\n  return child;\n};","map":{"version":3,"sources":["/Users/hayat/Desktop/code/react/nasa/app/client/node_modules/extendible/index.js"],"names":["has","Object","prototype","hasOwnProperty","slice","Array","copypaste","obj","args","call","arguments","i","prop","length","mixin","getOwnPropertyNames","defineProperty","getOwnPropertyDescriptor","apply","forEach","o","eachAttr","attr","mode","parent","e","caller","callee","child","module","exports","extend","protoProps","staticProps","constructor","Surrogate","__super__"],"mappings":"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","sourcesContent":["// 'use strict'; //<-- Root of all evil, causes thrown errors on readyOnly props.\n\nvar has = Object.prototype.hasOwnProperty\n  , slice = Array.prototype.slice;\n\n/**\n * Copy all readable properties from an Object or function and past them on the\n * object.\n *\n * @param {Object} obj The object we should paste everything on.\n * @returns {Object} obj\n * @api private\n */\nfunction copypaste(obj) {\n  var args = slice.call(arguments, 1)\n    , i = 0\n    , prop;\n\n  for (; i < args.length; i++) {\n    if (!args[i]) continue;\n\n    for (prop in args[i]) {\n      if (!has.call(args[i], prop)) continue;\n\n      obj[prop] = args[i][prop];\n    }\n  }\n\n  return obj;\n}\n\n/**\n * A proper mixin function that respects getters and setters.\n *\n * @param {Object} obj The object that should receive all properties.\n * @returns {Object} obj\n * @api private\n */\nfunction mixin(obj) {\n  if (\n       'function' !== typeof Object.getOwnPropertyNames\n    || 'function' !== typeof Object.defineProperty\n    || 'function' !== typeof Object.getOwnPropertyDescriptor\n  ) {\n    return copypaste.apply(null, arguments);\n  }\n\n  //\n  // We can safely assume that if the methods we specify above are supported\n  // that it's also save to use Array.forEach for iteration purposes.\n  //\n  slice.call(arguments, 1).forEach(function forEach(o) {\n    Object.getOwnPropertyNames(o).forEach(function eachAttr(attr) {\n      Object.defineProperty(obj, attr, Object.getOwnPropertyDescriptor(o, attr));\n    });\n  });\n\n  return obj;\n}\n\n/**\n * Detect if a given parent is constructed in strict mode so we can force the\n * child in to the same mode. It detects the strict mode by accessing properties\n * on the function that are forbidden in strict mode:\n *\n * - `caller`\n * - `callee`\n * - `arguments`\n *\n * Forcing the a thrown TypeError.\n *\n * @param {Function} parent Parent constructor\n * @returns {Function} The child constructor\n * @api private\n */\nfunction mode(parent) {\n  try {\n    var e = parent.caller || parent.arguments || parent.callee;\n\n    return function child() {\n      return parent.apply(this, arguments);\n    };\n  } catch(e) {}\n\n  return function child() {\n    'use strict';\n\n    return parent.apply(this, arguments);\n  };\n}\n\n//\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\n//\nmodule.exports = function extend(protoProps, staticProps) {\n  var parent = this\n    , child;\n\n  //\n  // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent's constructor.\n  //\n  if (protoProps && has.call(protoProps, 'constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = mode(parent);\n  }\n\n  //\n  // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function.\n  //\n  function Surrogate() {\n    this.constructor = child;\n  }\n\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate;\n\n  //\n  // Add prototype properties (instance properties) to the subclass,\n  // if supplied.\n  //\n  if (protoProps) mixin(child.prototype, protoProps);\n\n  //\n  // Add static properties to the constructor function, if supplied.\n  //\n  copypaste(child, parent, staticProps);\n\n  //\n  // Set a convenience property in case the parent's prototype is needed later.\n  //\n  child.__super__ = parent.prototype;\n\n  return child;\n};\n"]},"metadata":{},"sourceType":"script"}